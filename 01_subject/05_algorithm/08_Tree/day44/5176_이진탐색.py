# 이진탐색

# 1부터 N까지의 자연수를 이진 탐색 트리에 저장하려고 한다.
# 이진 탐색 트리는 어떤 경우에도 저장된 값이 왼쪽 서브트리의 루트 <현재 노드 <오른쪽 서브 트리의 루트인 규칙을 만족한다.
# 추가나 삭제가 없는 경우에는, 완전 이진 트리가 되도록 만들면 효율적인 이진 탐색 트리를 만들수 있다.
# 다음은 1부터 6까지의 숫자를 완전 이진 트리 형태인 이진 탐색 트리에 저장한 경우이다.
# 완전 이진 트리의 노드 번호는 루트를 1번으로 하고 아래로 내려가면서 왼쪽에서 오른쪽 순으로 증가한다.
# N이 주어졌을 때 완전 이진 트리로 만든 이진 탐색 트리의 루트에 저장된 값과,
# N/2번 노드(N이 홀수인 경우 소수점 버림)에 저장된 값을 출력하는 프로그램을 만드시오.

# 첫 줄에 테스트케이스의 수 T가 주어진다. 1<=T<=50
# 다음 줄부터 테스트 케이스의 별로 N이 주어진다. 1<=N<=1000

def Inorder(i):                       # 함수
    global cnt                        # cnt 가져오기
    if i <= N:                        # N 보다 작거나 같으면
        Inorder(i*2)                  # 왼쪽 노드
        tree[i] = cnt                 # 값 넣기
        cnt += 1                      # cnt 1증가 
        Inorder(i*2 + 1)              # 오른쪽 노드


T = int(input())                                     # case 수
for tc in range(1, T + 1):                           # case 반복
    N = int(input())                                 # 입력
    tree = [0 for _ in range(N + 1)]                 # tree
    cnt = 1                                          # cnt
    Inorder(1)                                       # tree 만들기
    print("#{} {} {}".format(tc, tree[1], tree[N//2])) # 출력